ASSET_MASTER_QUERY= insert into asset_master(isin,name,asset_id_1,asset_id_2,asset_id_3,asset_id_4,asset_id_5,description_1,description_2,description_3,category_id,subcategory_1_id,subcategory_2_id,subcategory_3_id,subcategory_4_id,subcategory_5_id,sector_id,region_id,country_id,stock_exchange_id,rate_type_id,rate_perc,currency_id,divisor,denomination,option_style_id,option_direction_id,strike_price_amt,strike_price_currency_id,contract_size_cnt,first_leg_currency_id,first_leg_amt,second_leg_currency_id,second_leg_amt,originating_currency_id,target_currency_id,issue_date,issuer_id,expiry_date,maturity_date,is_intrinsic_equals_mark,workflow_id,status_id,is_active,approved_by,approved_date,created_by,created_date,id,subcategory_1_config_name,subcategory_2_config_name,subcategory_3_config_name,subcategory_4_config_name,subcategory_5_config_name,category_config_name,sector_config_name,region_config_name,country_config_name,stock_exchange_config_name,rate_type_config_name,currency_config_name,option_style_config_name,option_direction_config_name,first_leg_currency_config_name,second_leg_currency_config_name,originating_currency_config_name,target_currency_config_name,issuer_config_name,status_config_name,strike_price_currency_config_name,eff_from_date,eff_to_date,interest_practice_id,interest_practice_config_name,interest_currency_id,interest_currency_config_name,interest_frequency_id,interest_frequency_config_name,redemption_currency_id,redemption_currency_config_name,redemption_frequency_id,redemption_frequency_config_name,redemption_date,redemption_price_amt,early_redemption_date,early_redemption_price_amt,trade_date) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?::date,?,?::date,?::date,?,?,?,?,?,?::date,?,now(),cast(concat(?,?,nextval('Seq_Asset_Master')) as NUMERIC),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
UNDERLAYING_ASSET_QUERY = insert into Underlying_Asset_Map(parent_asset_id,underlying_asset_id,initial_level_amt,is_active,created_by,created_date,id,underlying_isin,underlying_currency_config_name,underlying_currency_id) values(?,?,?,?,?,now(),cast(concat(?,?,nextval('Seq_Underlying_Asset_Map')) as NUMERIC),?,?,?)
UPDATE_UNDERLYING_ASSET_QUERY = update Underlying_Asset_Map set is_active=1,updated_by=?,updated_Date=now(),initial_level_amt=? where parent_asset_id=? and underlying_asset_id=? and is_active=1
DELETE_UNDERLYING_ASSET_QUERY = update Underlying_Asset_Map set is_active=-99,updated_by=?,updated_Date=now() where parent_asset_id=? and underlying_asset_id=? and is_active=1
IS_ISIN_PRESENT = select id from Asset_Master where isin= 'placeholder'
ERROR_INSERT_SQL=insert into Underlying_Assets_ERROR (isin,CREATED_BY,CREATED_Date)values(?,'klayadmin',now())	

ASSET_MASTER_UPDATE_QUERY= update asset_master set updated_date=now(),isin=?,name=?,asset_id_1=?,asset_id_2=?,asset_id_3=?,asset_id_4=?,asset_id_5=?,description_1=?,description_2=?,description_3=?,category_id=?,subcategory_1_id=?,subcategory_2_id=?,subcategory_3_id=?,subcategory_4_id=?,subcategory_5_id=?,sector_id=?,region_id=?,country_id=?,stock_exchange_id=?,rate_type_id=?,rate_perc=?,currency_id=?,divisor=?,denomination=?,option_style_id=?,option_direction_id=?,strike_price_amt=?,strike_price_currency_id=?,contract_size_cnt=?,first_leg_currency_id=?,first_leg_amt=?,second_leg_currency_id=?,second_leg_amt=?,originating_currency_id=?,target_currency_id=?,issue_date=?,issuer_id=?,expiry_date=?,maturity_date=?,is_intrinsic_equals_mark=?,workflow_id=?,status_id=?,is_active=?,subcategory_1_config_name=?,subcategory_2_config_name=?,subcategory_3_config_name=?,subcategory_4_config_name=?,subcategory_5_config_name=?,category_config_name=?,sector_config_name=?,region_config_name=?,country_config_name=?,stock_exchange_config_name=?,rate_type_config_name=?,currency_config_name=?,option_style_config_name=?,option_direction_config_name=?,first_leg_currency_config_name=?,second_leg_currency_config_name=?,originating_currency_config_name=?,target_currency_config_name=?,issuer_config_name=?,status_config_name=?,strike_price_currency_config_name=?,eff_from_date=?,eff_to_date=?,interest_practice_id=?,interest_practice_config_name=?,interest_currency_id=?,interest_currency_config_name=?,interest_frequency_id=?,interest_frequency_config_name=?,redemption_currency_id=?,redemption_currency_config_name=?,redemption_frequency_id=?,redemption_frequency_config_name=?,redemption_date=?,redemption_price_amt=?,early_redemption_date=?,early_redemption_price_amt=?,trade_date=?,updated_by=? where isin=? AND Currency_Id= ?

ASSET_INTEREST_DETAILS_QUERY = insert into asset_interest_detail(asset_id,interest_practice_id,interest_divisor_id,interest_currency_id,interest_frequency_id,is_schedule_present,is_active,created_by,created_date,id,interest_practice_config_name,interest_divisor_config_name,interest_currency_config_name,interest_frequency_config_name) values(?,?,?,?,?,?,?,?,now(),cast(concat(?,?,nextval('Seq_Asset_Interest_Detail')) as NUMERIC),?,?,?,?)
ASSET_REDEMPTION_DETAILS_QUERY = insert into asset_redemption_detail(asset_id,redemption_currency_id,redemption_frequency_id,redemption_date,redemption_price_amt,early_redemption_date,early_redemption_price_amt,is_schedule_present,is_active,created_by,created_date,id,redemption_currency_config_name,redemption_frequency_config_name) values(?,?,?,?::date,?,?::date,?,?,?,?,now(),cast(concat(?,?,nextval('Seq_Asset_Redemption_Detail')) as NUMERIC),?,?)
ASSET_INTEREST_SCHEDULE_QUERY = insert into asset_interest_schedule(asset_id,asset_interest_details_id,valuation_date,payment_date,coupon_barrier_perc,is_active,created_by,created_date,id) values(?,?,?::date,?::date,?,?,?,now(),cast(concat(?,?,nextval('Seq_Asset_Interest_Schedule')) as BIGINT))
ASSET_REDEMPTION_SCHEDULE_QUERY = insert into asset_redemption_schedule(asset_id,asset_redemption_details_id,valuation_date,payment_date,call_strike_perc,redemption_perc,max_upside_perc,max_protection_level_perc,participation_level_perc,is_active,created_by,created_date,id) values(?,?,?::date,?::date,?,?,?,?,?,?,?,now(),cast(concat(?,?,nextval('Seq_Asset_Redemption_Schedule')) as NUMERIC))
UPDATE_ASSET_INTERST_DETAILS = update asset_interest_detail set is_active=-99,updated_by='SYSTEM',updated_Date=now() where asset_id=?
UPDATE_ASSET_INTERST_SCHEDULE = update asset_interest_schedule set is_active=-99,updated_by='SYSTEM',updated_Date=now() where asset_id=?
UPDATE_ASSET_REDEMPTION_DETAILS = update asset_redemption_detail set is_active=-99,updated_by='SYSTEM',updated_Date=now() where asset_id=?
UPDATE_ASSET_REDEMPTION_SCHEDULE = update asset_redemption_schedule set is_active=-99,updated_by='SYSTEM',updated_Date=now()  where asset_id=?
assetPriceQuery= insert into Asset_Price(asset_id,isin,currency_id,custodian_id,price_amt,dirty_price_amt,open_amt,high_amt,low_amt,close_amt,bid_amt,ask_amt,eff_from_date,eff_To_date,source_id,remarks,created_by,created_date,id,currency_config_name,custodian_config_name,source_config_name) values(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),cast(concat(?,?,nextval('seq_Asset_Price')) as NUMERIC),?,?,?)
UPDATE_ASSET_PRICE= update asset_price set price_amt=?,dirty_price_amt=?,open_amt=?,high_amt=?,low_amt=?,close_amt=?,bid_amt=?,ask_amt=?,source_id=?, remarks=?,currency_config_name=?,custodian_config_name=?,source_config_name=?, updated_by=?,updated_Date=now() where id=? 
UPDATE_PRICE = update asset_price set updated_by=?,updated_Date=now(),eff_to_date= ? where id=?
GET_MAX_DATE = (SELECT MAX(eff_from_date) FROM asset_price WHERE id = 
IS_ID_PRESENT= select id from Asset_Master where isin = 'isinPlaceholder' AND  currency_id = currencyPlaceholder
IS_ASSET_ID_PRESENT= select id from Asset_Master where isin = 'isinPlaceholder' AND  currency_config_name = 'currencyPlaceholder'
UPDATE_EFF_TO_DATE = update asset_price set remarks='Effective To DATE is Updated',eff_to_date=?, updated_by='SYSTEM',updated_Date=now()  where id=? AND custodian_app_id=?
FETCH_ASSET_PRICE = SELECT assetPriceDetails.*, assetPriceMaxDate.assetPriceMaxDate FROM (select id, custodian_app_id , isin, eff_from_date, eff_to_date from asset_price where (isin = ?) AND (custodian_app_id = ? )group by id,custodian_app_id , isin, eff_from_date, eff_to_date) as assetPriceDetails JOIN (select  isin , custodian_app_id, max(eff_from_date) assetPriceMaxDate FROM asset_price where (isin = ?) AND (custodian_app_id = ?) group by isin , custodian_app_id) assetPriceMaxDate ON (assetPriceMaxDate.isin = assetPriceDetails.isin and assetPriceMaxDate.custodian_app_id = assetPriceDetails.custodian_app_id)
FETCH_ASSET_PRICE_QUERY = SELECT assetPriceDetails.*, assetPriceMaxDate.assetPriceMaxDate, assetPriceMaxDate.assetPriceKey FROM (select id, custodian_id , isin, eff_from_date, eff_to_date,currency_id  from asset_price where eff_to_date is NULL AND (
INSERT_ASSETRETURNS = INSERT into asset_returns(asset_id,eff_from_date,source_id,remarks,created_by,created_date,id) values (?,?::date,?,?,?,now(),cast(concat(?,?,nextval('seq_Asset_Returns')) as NUMERIC))
FETCH_ASSET_RETURNS = SELECT assetReturnsDetails.*, assetReturnsMaxDate.assetReturnsMaxDate, assetReturnsMaxDate.assetReturnsKey FROM (select id, asset_id, eff_from_date, eff_to_date from asset_returns where (
FRESH_INSERT_ASSET_RETURNS = insert into asset_returns(asset_id,eff_from_date,source_id,remarks,created_by,created_date,id,source_config_name,isin,currency_config_name,currency_id) values(?,?,?,?,?,now(),cast(concat(?,?,nextval('Seq_Asset_Returns')) as NUMERIC),?,?,?,?)
UPDATE_ASSET_RETURNS = update asset_returns set source_id=?,remarks=?,source_config_name=?,updated_by=?,updated_Date=now() where id=?
UPDATE_RETURNS = update asset_returns set updated_by=?,updated_Date=now(),eff_to_date=?::date  where id=?
FRESH_INSERT_ADDN_INFO = insert into asset_returns_addtn_info (asset_id,asset_returns_id,info_key,info_value_nbr,is_active,created_by,created_date,id) values(?,?,?,?,?,?,now(),cast(concat(?,?,nextval('Seq_Asset_Returns_Addtn_Info')) as NUMERIC))
UPDATE_ADDN_INFO = update asset_returns_addtn_info set updated_by=?,updated_Date=now(), is_active=1, info_key=?, info_value_nbr=? where asset_id=? and info_key=?
EXCHANGE_RATE_INITIAL_UPDATE_QUERY=update Exchange_Rate set UPDATED_BY=?,UPDATED_Date=now(),price_amt=? where id=? 
#insert into asset_key_figure (id,asset_id,custodian_id,maturity,earning_perc, estimated_dividend_perc,yield,yield_call,duration,duration_call,spread_over_riskfree_rate,modified_duration,  convexity,pvbp,ltv_perc,eff_from_date,source_id,remarks,created_by,created_date)  values(cast(concat(?,?,nextval('seq_asset_key_figure')) as BIGINT),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now()) 
EXCHANGE_RATE_UPDATE_QUERY=update Exchange_Rate set UPDATED_Date=now(),Eff_To_Date=?,UPDATED_BY=? where id= ?
EXCHANGE_RATE_QUERY=insert into Exchange_Rate (id,custodian_id,from_currency_id,to_currency_id,price_amt,eff_from_date,eff_to_date,source_id,remarks,created_date,custodian_config_name,from_currency_config_name,to_currency_config_name,source_config_name,created_by) values(cast(concat(?,?,nextval('Seq_Exchange_Rate')) as NUMERIC),?,?,?,?,?,?,?,?,now(),?,?,?,?,?)
ASSET_KEY_FIGURE_INSERT=insert into asset_key_figure (id,asset_id,custodian_id,maturity,earning_perc,estimated_dividend_perc,yield,yield_call,duration,duration_call,spread_over_riskfree_rate,modified_duration,convexity,pvbp,ltv_perc, Discounted_PnL,eff_from_date,eff_To_date,source_id,remarks,created_by,created_date,isin,currency_id,custodian_config_name,currency_config_name,source_config_name)  values(cast(concat(?,?,nextval('seq_asset_key_figure')) as NUMERIC),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?,?,?,?,?)
ASSET_KEY_FIGURE_UPDATE=update asset_key_figure set updated_Date=now(),maturity=?,earning_perc=?,estimated_dividend_perc=?,yield=?,yield_call=?,duration=?,duration_call=?,spread_over_riskfree_rate=?,modified_duration=?,convexity=?,pvbp=?,ltv_perc=?,Discounted_PnL=?,eff_from_date=?,source_id=?,remarks=?,updated_by=? where id=?
ASSET_KEY_FIGURE_SELECT_CONDITIONAL=SELECT assetkeyfiguredetails.*, assetkeyfiguremaxdate.assetkeyfigurekey FROM  ( SELECT * FROM asset_key_figure WHERE  eff_to_date is NULL AND ( (<asset_id>) AND (<custodian_id>) ) ) as assetkeyfigureDetails JOIN (select concat(custodian_id,asset_id) as assetkeyfigureKey,asset_id, custodian_id, max_eff_from_date assetkeyfigureMaxDate FROM asset_custodianwise_last_date where (<asset_id>) AND (<custodian_id> ) AND ( max_eff_from_date_for_config_name = 'ACM1921' ) ) assetkeyfiguremaxdate ON ( assetkeyfiguredetails.asset_id = assetkeyfiguremaxdate.asset_id AND ( assetkeyfiguredetails.custodian_id = assetkeyfiguremaxdate.custodian_id OR ( assetkeyfiguremaxdate.custodian_id IS NULL ) ) AND assetkeyfiguremaxdate.assetkeyfiguremaxdate = assetkeyfiguredetails.eff_from_date )
EXCHANGE_RATE_SELECT_CONDITIONAL=SELECT exchangeratedetails.*, exchangeratemaxdate.exchangeratekey FROM  ( SELECT * FROM exchange_rate WHERE  eff_to_date is NULL AND ( (<from_currency_id>) AND (<to_currency_id>) AND (<custodian_id>) ) ) as exchangeRateDetails JOIN (select concat(custodian_id,from_currency_id,to_currency_id) as exchangeRateKey,from_currency_id,to_currency_id, custodian_id, max_eff_from_date exchangeRateMaxDate FROM asset_custodianwise_last_date where (<from_currency_id>) AND (<to_currency_id>) AND (<custodian_id> ) AND ( max_eff_from_date_for_config_name = 'ACM1924' ) ) exchangeratemaxdate ON ( exchangeratedetails.from_currency_id = exchangeratemaxdate.from_currency_id AND exchangeratedetails.to_currency_id = exchangeratemaxdate.to_currency_id AND ( ( exchangeratemaxdate.custodian_id = exchangeratedetails.custodian_id ) OR ( exchangeratemaxdate.custodian_id IS NULL ) ) AND exchangeratemaxdate.exchangeratemaxdate = exchangeratedetails.eff_from_date );
IS_EFF_TO_DATE_PRESENT = SELECT id,eff_to_date,expiry_date,maturity_date,subcategory_1_config_name FROM asset_master where is_active=1
IS_EFF_TO_DATE_NOT_PRESENT = SELECT id,eff_to_date FROM asset_master WHERE eff_to_date IS NULL
IS_MATURITY_DATE_PRESENT = SELECT id,eff_to_date,expiry_date,maturity_date FROM asset_master WHERE eff_to_date IS NOT NULL
SET_EFF_TO_DATE = update asset_master set eff_to_date=? where id = ?
SET_MATURITY_DATE = update asset_master set maturity_date=? where id = ?
SET_EXPIRY_DATE = update asset_master set expiry_date=? where id = ?
SELECT_SP_METRICS = select id from asset_sp_metrics where asset_id = 
UPDATE_ASSET_SP_METRICS= update asset_sp_metrics set is_active=-99 where asset_id = ?
SELECT_SP_UNDERLYING_METRICS = select id from asset_sp_underlying_metrics where asset_id = 
UPDATE_ASSET_SP_UNDERLYING_METRICS= update asset_sp_underlying_metrics set is_active=0 where parent_asset_id = ?
ASSET_KEY_FIGURE_SELECT=select * from asset_key_figure where <condition>
EXCHANGE_RATE_SELECT=select * from exchange_rate where <conditions>
ASSET_KEY_FIGURE_INFO_SELECT=select ask.* from asset_key_figure ask join asset_master am on am.id=ask.asset_id where <parameter>
ASSET_MASTER_JOIN=select * from asset_master AM JOIN Asset_Interest_Detail AID ON AM.id = AID.asset_id and AID.is_active != 0 JOIN Asset_Interest_Schedule AIS ON AM.id = AIS.asset_id and AIS.is_active != -99 JOIN Asset_Redemption_Detail ARD ON AM.id = ARD.asset_id and ARD.is_active != -99 JOIN Asset_Redemption_Schedule ARS ON AM.id = ARS.asset_id and ARS.is_active != -9 JOIN Underlying_Asset_Map UAM ON AM.id = UAM.parent_asset_id and UAM.is_active != -99 where AM.id = ( select id from asset_master where 

SET_IS_ACTIVE = update asset_master set is_active=0, eff_to_date=? where id = ?
SET_ASSET_INTEREST_DETAIL_INACTIVE = update asset_interest_detail set is_active=0 where asset_id = ?
SET_ASSET_INTEREST_SCHEDULE_INACTIVE = update asset_interest_schedule set is_active=0 where asset_id = ?
SET_ASSET_REDEM_DETAIL_INACTIVE = update asset_redemption_detail set is_active=0 where asset_id = ?
SET_ASSET_REDEM_SCHEDULE_INACTIVE = update asset_redemption_schedule set is_active=0 where asset_id = ?
SET_UNDERLYING_ASSET_INACTIVE = update underlying_asset_map set is_active=0 where parent_asset_id = ?
SELECT_SUBCATAGORY = SELECT subcategory_1_config_name FROM ASSET_MASTER WHERE isin = 'isinPlaceholder' AND  Currency_Config_Name = 'currencyPlaceholder'

GET_FROM_ASSET_MASTER = SELECT * FROM ASSET_MASTER WHERE (SUBCATEGORY_1_CONFIG_NAME = 'ACM236' OR SUBCATEGORY_1_CONFIG_NAME = 'ACM247' OR SUBCATEGORY_1_CONFIG_NAME =  'ACM250' ) AND IS_ACTIVE = 1

GET_VALUATION_DATE_AND_BARRIER_PERC = SELECT VALUATION_DATE as NEXT_VALUATION_DATE , COUPON_BARRIER_PERC FROM ASSET_INTEREST_SCHEDULE WHERE IS_ACTIVE = 1 AND ASSET_ID = :assetId AND VALUATION_DATE >= CURRENT_DATE ORDER BY VALUATION_DATE ASC LIMIT 1

GET_NEXT_VALUATION_DATE = SELECT VALUATION_DATE FROM asset_valuation_schedule WHERE IS_ACTIVE = 1 AND ASSET_ID = :assetId AND VALUATION_DATE >= CURRENT_DATE ORDER BY VALUATION_DATE ASC LIMIT 1

GET_FINAL_VALUATION_DATE = SELECT MAX(VALUATION_DATE) FROM asset_valuation_schedule WHERE IS_ACTIVE = 1 AND ASSET_ID = :assetId AND VALUATION_DATE >= CURRENT_DATE

GET_COUPON_BARRIER_PERC = SELECT COUPON_BARRIER_PERC FROM asset_valuation_schedule WHERE IS_ACTIVE = 1 AND ASSET_ID = :assetId AND VALUATION_DATE >= CURRENT_DATE ORDER BY VALUATION_DATE ASC LIMIT 1

GET_AUTOCALL_PERC = SELECT CALL_STRIKE_PERC FROM asset_valuation_schedule WHERE IS_ACTIVE = 1 AND ASSET_ID = :assetId AND VALUATION_DATE >= CURRENT_DATE ORDER BY VALUATION_DATE ASC LIMIT 1

GET_CURRENT_LEVEL_AMOUNT = SELECT PRICE_AMT FROM ASSET_PRICE WHERE  ASSET_ID = :assetId AND  (EFF_FROM_DATE <= CURRENT_DATE AND (EFF_TO_DATE is null OR EFF_TO_DATE >= CURRENT_DATE))  ORDER BY EFF_FROM_DATE desc LIMIT 1

GET_CURRENT_LEVEL_AMOUNT_BY_ISIN = SELECT * FROM ASSET_PRICE WHERE ( 

GET_CURRENT_LEVEL_AMOUNT_BY_ISIN_V1 = SELECT * FROM ASSET_PRICE WHERE  ISIN = :isin AND CURRENCY_CONFIG_NAME = :currencyConfigName AND CUSTODIAN_CONFIG_NAME = :custodianConfigName AND (EFF_FROM_DATE <= TO_DATE(:computedDate, 'yyyy-mm-DD') AND (EFF_TO_DATE is null OR EFF_TO_DATE >= TO_DATE(:computedDate, 'yyyy-mm-DD')))  ORDER BY EFF_FROM_DATE desc LIMIT 1

GET_INTEREST_CONFIG_VALUE = SELECT CONFIG_VALUE FROM ASSET_MASTER ASTINTDETAIL INNER JOIN APPLICATION_CONFIG_MASTER APPCONF ON ASTINTDETAIL.INTEREST_FREQUENCY_ID = APPCONF.ID WHERE ASTINTDETAIL.ID = :assetId 

GET_REDEMPTION_CONFIG_VALUE = SELECT CONFIG_VALUE FROM ASSET_MASTER ASTREMDETAIL INNER JOIN APPLICATION_CONFIG_MASTER APPCONF ON ASTREMDETAIL.REDEMPTION_FREQUENCY_ID = APPCONF.ID WHERE ASTREMDETAIL.ID = :assetId

GET_INITIAL_LEVEL_AMOUNT = SELECT INITIAL_LEVEL_AMT FROM UNDERLYING_ASSET_MAP WHERE PARENT_ASSET_ID = :assetId AND IS_ACTIVE = 1

INSERT_ASSET_SP_METRICS = INSERT INTO ASSET_SP_METRICS (ID, ASSET_ID, COMPUTED_DATE, ASSET_MATURITY_DAYS_LEFT, ASSET_DAYS_FROM_TRADE, NEXT_VALUATION_DATE, NEXT_COUPON_PERC, BARRIER_PERC, AUTOCALL_PERC, DISTANCE_TO_BARRIER_PERC, INTRINSIC_PERC, MARK_PERC, IS_AUTOCALL_LIKELY, IS_ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE, ASSET_DAYS_TO_NEXT_VALUATION, MIN_INDEX_RETURN_PERC,ISIN,currency_config_name) VALUES ( NEXTVAL('seq_Asset_SP_Metrics'), :assetId, TO_DATE(:computedDate, 'yyyy-mm-DD'), :assetMaturityDaysLeft, :assetDaysFromTrade, TO_DATE(:nextValuationDate, 'yyyy-mm-DD'), :nextCouponPerc, :barrierPerc, :autocallPerc, :distanceToBarrierPerc, :intrinsicPerc, :markPerc, :isAutocallLikely, :isActive, 'SYSTEM', now(), 'SYSTEM', now(), :assetDaysToNextValuation, :minIndexReturnPerc, :isin, :currencyConfigName)

INSERT_ASSET_SP_UNDERLYING_METRICS = INSERT INTO ASSET_SP_UNDERLYING_METRICS (ID, ASSET_SP_METRICS_ID, UNDERLYING_ASSET_ID, PARENT_ASSET_ID, COMPUTED_DATE, INITIAL_LEVEL_AMT, BARRIER_LEVEL_AMT, CURRENT_LEVEL_AMT, MARGIN_BETWEEN_CURRENT_AND_BARRIER_PERC, MARGIN_BETWEEN_INITIAL_AND_CURRENT_PERC, AUTOCALL_LEVEL_AMT, MARGIN_FROM_AUTOCALL_PERC, IS_ACTIVE, CREATED_BY, CREATED_DATE, UPDATED_BY, UPDATED_DATE) VALUES ( NEXTVAL('seq_Asset_SP_Underlying_Metrics'), :assetSPMetricsId, :underlyingAssetId, :parentAssetId, TO_DATE(:computedDate, 'yyyy-mm-DD'), :initialLevelAmt, :barrierLevelAmt, :currentLevelAmt, :marginBetweenCurrentAndBarrierPerc, :marginBetweenInitialAndCurrentPerc, :autocallLevelAmt, :marginFromAutocallPerc, :isActive, 'SYSTEM', now(), 'SYSTEM', now())

GET_UNDERLYING_ASSET_ID = SELECT * FROM UNDERLYING_ASSET_MAP WHERE PARENT_ASSET_ID = :assetId AND IS_ACTIVE = 1 

SET_ASSET_SP_IS_ACTIVE_VALUE = UPDATE ASSET_SP_METRICS SET IS_ACTIVE = -99 WHERE 

SET_ASSET_SP_UNDERLYING_IS_ACTIVE_VALUE = UPDATE ASSET_SP_UNDERLYING_METRICS SET IS_ACTIVE = -99 WHERE 
	
GET_ALL_ASSET_SP_METRICS = SELECT *,USPMETRICS.ID as UID,SPMETRICS.ID as SPID FROM ASSET_MASTER MASTER INNER JOIN ASSET_SP_METRICS SPMETRICS ON MASTER.ID = SPMETRICS.ASSET_ID LEFT OUTER JOIN ASSET_SP_UNDERLYING_METRICS USPMETRICS ON SPMETRICS.ID = USPMETRICS.ASSET_SP_METRICS_ID WHERE(
	
GET_ALL_ASSET_SP_METRICS_V1 = SELECT * FROM ASSET_MASTER MASTER INNER JOIN ASSET_SP_METRICS SPMETRICS ON MASTER.ID = SPMETRICS.ASSET_ID INNER JOIN ASSET_SP_UNDERLYING_METRICS USPMETRICS ON SPMETRICS.ID = USPMETRICS.ASSET_SP_METRICS_ID WHERE ISIN = :isin AND CURRENCY_CONFIG_NAME = :currencyConfigName AND SPMETRICS.IS_ACTIVE = 1 AND USPMETRICS.IS_ACTIVE = 1 AND  (EFF_FROM_DATE <= to_date(:computedDate,'yyyy-mm-DD') OR (EFF_TO_DATE is null OR EFF_TO_DATE > to_date(:computedDate, 'yyyy-mm-DD'))) 
ASSET_KEY_FIGURE_INFO_SELECT=select ask.* from asset_key_figure ask join asset_master am on am.id=ask.asset_id where <parameter>
ASSET_MASTER_JOIN=select * from asset_master AM JOIN Asset_Interest_Detail AID ON AM.id = AID.asset_id and AID.is_active != -99 JOIN Asset_Interest_Schedule AIS ON AM.id = AIS.asset_id and AIS.is_active != -99 JOIN Asset_Redemption_Detail ARD ON AM.id = ARD.asset_id and ARD.is_active != -99 JOIN Asset_Redemption_Schedule ARS ON AM.id = ARS.asset_id and ARS.is_active != -9 JOIN Underlying_Asset_Map UAM ON AM.id = UAM.parent_asset_id and UAM.is_active != -99 where AM.id = ( select id from asset_master where 

CHECK_CATEGORY = select Category_Config_Name from asset_master where isin = 'isinPlaceholder' AND  Currency_Config_Name = 'currencyPlaceholder'

GET_CATEGORY_LIST = select isin,Currency_Config_Name,Category_Config_Name,subcategory_1_config_name,subcategory_2_config_name,first_leg_currency_config_name,second_leg_currency_config_name from asset_master where (

GET_CURRENCY = select Currency_Config_Name from asset_master where isin = 'isinPlaceholder' AND  Currency_Config_Name = 'currencyPlaceholder'

GET_SUBCATAGORY2 = SELECT subcategory_2_config_name FROM ASSET_MASTER WHERE isin = 'isinPlaceholder' AND  Currency_Config_Name = 'currencyPlaceholder'

GET_FIRST_LEG_CURRENCY = SELECT first_leg_currency_config_name FROM ASSET_MASTER WHERE isin = 'isinPlaceholder' AND  Currency_Config_Name = 'currencyPlaceholder'

GET_SECOND_LEG_CURRENCY = SELECT second_leg_currency_config_name FROM ASSET_MASTER WHERE isin = 'isinPlaceholder' AND  Currency_Config_Name = 'currencyPlaceholder'

ASSET_MASTER_SELECT_QUERY=select * from asset_master where (<condition>)

GET_ISIN_CURRENCY = SELECT * FROM ASSET_MASTER WHERE (

ASSET_SEARCH_SQL=select *, (Select count(0) from (select * from asset_master am where <Conditions>) output )totalRecords from ( select row_number() over(order by ID) record_number, * from ( select am.*, uam.parent_asset_id as asset_id, uam.id as uid, uam.underlying_asset_id,(select name from asset_master where id=uam.underlying_asset_id) underlying_asset_name,uam.initial_level_amt, uam.underlying_isin,uam.underlying_currency_config_name,uam.underlying_currency_id from asset_master am left outer join underlying_asset_map uam on am.id=uam.parent_asset_id and uam.is_active = 1 where <Conditions>) output) finalOutput

UPDATE_ASSET_KEY_FIGURE = update asset_key_figure set eff_to_date= ?,maturity= ?,earning_perc=?,estimated_dividend_perc=?,yield=?,yield_call=?,duration=?,duration_call=?,spread_over_riskfree_rate=?,modified_duration=?,convexity=?,pvbp=?,ltv_perc=?,source_id=?,source_config_name=?,remarks=? where asset_id= ? and custodian_id= ?

GET_UNDERLYING_ASSET_MAP_BY_PARENT_ASSET_ID = SELECT * FROM Underlying_Asset_Map WHERE PARENT_ASSET_ID =

ASSET_VALUATION_SCHEDULE_INSERT = INSERT INTO asset_valuation_schedule (ID,asset_id,valuation_date,payment_date,coupon_barrier_perc,call_strike_perc,redemption_perc,max_upside_perc,max_protection_level_perc,participation_level_perc,is_active,created_by,created_date) VALUES (cast(concat(?,?,nextval('seq_Asset_Valuation_Schedule')) as NUMERIC),?,?,?,?,?,?,?,?,?,1,?,now())

ASSET_VALUATION_SCHEDULE_UPDATE = UPDATE asset_valuation_schedule SET payment_date=?,coupon_barrier_perc=?,call_strike_perc=?,redemption_perc=?,max_upside_perc=?,max_protection_level_perc=?,participation_level_perc=?,updated_by=?,updated_date=now() where asset_id=? AND valuation_date=? AND is_active=1

GET_VALUATION_SCHEDULE = SELECT * FROM asset_valuation_schedule WHERE asset_id=

ASSET_VALUATION_SCHEDULE_DELETE = UPDATE asset_valuation_schedule SET updated_by=?, updated_date=now(), is_active=-99 where asset_id=? AND valuation_date=? AND is_active=1

GET_ASSETS = SELECT am.*, assetsection.* FROM( SELECT am.* FROM asset_master am WHERE ( <<placeholder>> )) am left outer join( select 'underlying_asset_map' as section , uam.parent_asset_id as asset_id, uam.id as uid, uam.underlying_asset_id, uamst.name as underlying_asset_name, uam.initial_level_amt, uam.underlying_isin,uam.underlying_currency_config_name,uam.underlying_currency_id, null as vid,null as valuation_date,null as payment_date,null as coupon_barrier_perc,null as call_strike_perc,null as redemption_perc,null as max_upside_perc,null as max_protection_level_perc,null as participation_level_perc from underlying_asset_map uam inner join asset_master uamst on uamst.id= uam.underlying_asset_id where uam.is_active = 1 union select 'asset_valuation_schedule' as section , avs.asset_id ,null,null,null,null,null,null,null, avs.id as vid, avs.valuation_date, avs.payment_date, avs.coupon_barrier_perc, avs.call_strike_perc, avs.redemption_perc, avs.max_upside_perc, avs.max_protection_level_perc, avs.participation_level_perc from asset_valuation_schedule AS avs WHERE avs.is_active = 1 ) assetsection ON am.id = assetsection.asset_id 

GET_ASSET_ID = SELECT ID FROM ASSET_MASTER WHERE (

GET_UNDERLYING_ASSET_MAP = SELECT * FROM UNDERLYING_ASSET_MAP WHERE PARENT_ASSET_ID = 

GET_ASSET_PRICE = SELECT * FROM ASSET_PRICE WHERE asset_id = 

SPMETRICS_INSERT = INSERT INTO asset_sp_metrics (id,isin,currency_config_name,currency_id,asset_id,computed_date,asset_maturity_days_left,asset_days_from_trade,asset_days_to_final_valuation,final_valuation_date,asset_days_to_next_valuation,next_valuation_date,next_coupon_perc,barrier_perc,autocall_perc,distance_to_barrier_perc,intrinsic_perc,min_index_return_perc,mark_perc,is_autocall_likely,is_active,created_by,created_date) values(cast(concat(?,?,nextval('Seq_asset_sp_metrics')) as NUMERIC),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now())

UNEDRLYING_SPMETRICS_INSERT = INSERT INTO asset_sp_underlying_metrics (id,asset_sp_metrics_id,underlying_asset_id,parent_asset_id,underlying_isin,underlying_currency_config_name,underlying_currency_id,initial_level_amt,barrier_level_amt,current_level_amt,margin_between_current_and_barrier_perc,margin_between_initial_and_current_perc,autocall_level_amt,margin_from_autocall_perc,created_by,created_date,is_active) values(cast(concat(?,?,nextval('Seq_asset_sp_underlying_metrics')) as NUMERIC),?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?)

SPMETRICS_UPDATE =  update asset_sp_metrics set computed_date=?,asset_maturity_days_left=?,asset_days_from_trade=?,asset_days_to_final_valuation=?,final_valuation_date=?,asset_days_to_next_valuation=?,next_valuation_date=?,next_coupon_perc=?,barrier_perc=?,autocall_perc=?,distance_to_barrier_perc=?,intrinsic_perc=?,min_index_return_perc=?,mark_perc=?,is_autocall_likely=?,is_active=1,updated_by=?,updated_date=now() where id=?

UNEDRLYING_SPMETRICS_UPDATE = update asset_sp_underlying_metrics set initial_level_amt=?,barrier_level_amt=?,current_level_amt=?,margin_between_current_and_barrier_perc=?,margin_between_initial_and_current_perc=?,autocall_level_amt=?,margin_from_autocall_perc=?,updated_by='SYSTEM',updated_date=now() where asset_sp_metrics_id=?

INACTIVE_SPMETRICS = update asset_sp_metrics set is_active=?,updated_by=?,updated_date=now() where id=?

INACTIVE_UNEDRLYING_SPMETRICS = update asset_sp_underlying_metrics set is_active=0,updated_by=?,updated_date=now() where asset_sp_metrics_id=?

GET_SP_METRICS = select *,id as spid from asset_sp_metrics where is_active=1 AND computed_date = ?

GET_VALUATION_SCHEDULE_BY_ASSETID = SELECT * FROM asset_valuation_schedule WHERE IS_ACTIVE = 1 AND ASSET_ID = 

UPDATE_ASSET_MASTER_FOR_SOURCE = update asset_master set isin=?,Description_1=?,Category_Id=?, Category_Config_Name=?,SubCategory_1_Id=?,SubCategory_1_Config_Name=?,SubCategory_2_Id=?,SubCategory_2_Config_Name=?,SubCategory_3_Id=?,SubCategory_3_Config_Name=?,Rate_Perc=?,Currency_Id=?,Currency_Config_Name=?,Issue_Date=?,Issuer_Id=?,Issuer_Config_Name=?,Trade_Date=?,Expiry_Date=?,Maturity_Date=?,Is_Intrinsic_Equals_Mark=?,Status_Id=?,Status_Config_Name=?,Interest_Currency_Id=?,Interest_Currency_Config_Name=?,Interest_Frequency_Id=?,Interest_Frequency_Config_Name=?,Redemption_Currency_Id=?,Redemption_Currency_Config_Name=?,Redemption_Frequency_Id=?,Redemption_Frequency_Config_Name=?,Eff_From_Date=?,Is_Active =1,UPDATED_BY=?,UPDATED_Date=now() where isin=? and Currency_Config_Name=?

GET_ASSET_PRICE_WITH_NULL = SELECT isin,id,currency_id,custodian_id,custodian_config_name,asset_id,currency_config_name,price_amt,dirty_price_amt,open_amt,open_amt,high_amt,high_amt,low_amt,close_amt,bid_amt,ask_amt,eff_from_date,eff_to_date,source_id,source_config_name,remarks,created_by,created_date,updated_by,updated_date FROM ( SELECT * FROM asset_price WHERE ( 

GET_ASSET_KEY_FIGURE_WITH_NULL = SELECT isin,id,currency_id,custodian_id,custodian_config_name,custodian_config_name,asset_id,currency_config_name,maturity,earning_perc,estimated_dividend_perc,yield,yield_call,duration,duration_call,spread_over_riskfree_rate,modified_duration,convexity,pvbp,ltv_perc,discounted_pnl,eff_from_date,eff_to_date,source_id,source_config_name,remarks,created_by,created_date,updated_by,updated_date FROM ( SELECT * FROM asset_key_figure WHERE ( 

GET_EXCHANGE_RATE_WITH_NULL = SELECT to_currency_config_name, id, custodian_id, custodian_config_name, to_currency_id, from_currency_config_name, from_currency_id, price_amt, eff_from_date, eff_to_date, source_id, source_config_name, remarks, created_by, created_date, updated_by, updated_date FROM ( SELECT * FROM exchange_rate WHERE ( 

Delete_Underlying_Asset_Map=delete from Underlying_Asset_Map where is_active=-99
Delete_Asset_Valuation_Schedule=delete from Asset_Valuation_Schedule where is_active=-99

GET_ASSET_BUSINESS_DATE = select business_date from Asset_business_date

INSERT_FailedAssets=insert into FailedAssets (id,defaulted_for,ISIN,currency,from_currency,to_currency,custodian,reference_date,eff_from_date,eff_to_date) values(cast(concat(?,?,nextval('seq_FailedAssets')) as NUMERIC),?,?,?,?,?,?,?,?,?);

INSERT_INTO_ASSET_CUSTODIANWISE_LAST_DATE = insert into asset_custodianwise_last_date (id,asset_id,isin,Currency_Config_Name,currency_id,custodian_id,Custodian_Config_Name,max_eff_from_date_for_id,max_eff_from_date_for_config_name,max_eff_from_date,CREATED_BY,CREATED_DATE) values(cast(concat(?,?,nextval('seq_asset_custodianwise_last_date')) as NUMERIC),?,?,?,?,?,?,?,?,?,?,now())

GET_ASSET_CUSTODIANWISE_LAST_DATE =select id from asset_custodianwise_last_date where isin= 'isinPlaceholder' and currency_config_name = 'currencyPlaceholder' and custodian_config_name = 'custodianPlaceholder' and max_eff_from_date_for_config_name = 'maxEffDateConfigNamePlaceholder'

UPDATE_ASSET_CUSTODIANWISE_LAST_DATE = update asset_custodianwise_last_date set max_eff_from_date = ?, updated_by= ?, updated_date=now() where isin=? and currency_config_name = ? and (custodian_config_name = ?  or custodian_config_name is null) and max_eff_from_date_for_config_name = ?

INSERT_INTO_ASSET_CUSTODIANWISE_LAST_DATE_WITHOUT_CUSTODIAN = insert into asset_custodianwise_last_date (id,asset_id,isin,Currency_Config_Name,currency_id,max_eff_from_date_for_id,max_eff_from_date_for_config_name,max_eff_from_date,CREATED_BY,CREATED_DATE) values(cast(concat(?,?,nextval('seq_asset_custodianwise_last_date')) as NUMERIC),?,?,?,?,?,?,?,?,now())

UPDATE_ASSET_CUSTODIANWISE_LAST_DATE_WITHOUT_CUSTODIAN = update asset_custodianwise_last_date set max_eff_from_date = ?, updated_by= ?, updated_date=now() where isin=? and currency_config_name = ? and max_eff_from_date_for_config_name = ?

INSERT_INTO_ASSET_CUSTODIANWISE_LAST_DATE_FOR_EXCHANGE_RATE = insert into asset_custodianwise_last_date (id,From_Currency_Id,From_Currency_Config_Name,To_Currency_Id,To_Currency_Config_Name,custodian_id,Custodian_Config_Name,max_eff_from_date_for_id,max_eff_from_date_for_config_name,max_eff_from_date,CREATED_BY,CREATED_DATE) values(cast(concat(?,?,nextval('seq_asset_custodianwise_last_date')) as NUMERIC),?,?,?,?,?,?,?,?,?,?,now())

UPDATE_ASSET_CUSTODIANWISE_LAST_DATE_FOR_EXCHANGE_RATE = update asset_custodianwise_last_date set max_eff_from_date = ?, updated_by= ?, updated_date=now() where From_Currency_Config_Name=? and To_Currency_Config_Name = ? and (custodian_config_name = ?  or custodian_config_name is null) and max_eff_from_date_for_config_name = ?

UNIVERSE_STOCK_DETAIL_BY_TERMINAL = insert into Universe_Stock_Details_By_Terminal (id,universe_stock_master_id,isin,currency_id,currency_config_name,ticker,terminal_app_id,terminal_app_config_name,analyst_cnt,buy_analyst_cnt,hold_analyst_cnt,sell_analyst_cnt,volatility_1y_perc,price_amt,target_price_mean_amt,target_price_median_amt,price_syscurr_amt,target_price_syscurr_amt,market_cap_syscurr_amt,forward_dividend_yield_12m_perc,trailing_price_to_book_nbr,forward_price_to_earning_12m_nbr,forward_roe_12m_perc,forward_ev_to_ebitda_12m_nbr,price_change_1d_perc,price_change_1w_perc,price_change_1m_perc,price_change_3m_perc,price_change_6m_perc,price_change_1y_perc,price_change_2y_perc,price_change_3y_perc,price_change_5y_perc,relative_strength_index_14d_nbr,boll_bands_20d_nbr,upside_to_price_target,over_sold,buy_ratings,sell_ratings,eff_from_date,eff_to_date,created_by,created_date,updated_by,updated_date) values(cast(concat(?,?,nextval('Seq_Exchange_Rate')) as NUMERIC),(select id from universe_stock_master where isin=? and currency_config_name=?),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?,?)

FETCH_MAXDATE_LIST_FOR_TERMINAL=select *,concat(isin,currency_id) as assetpricekey from asset_custodianwise_last_date where ( 

INSERT_INTO_ASSET_CUSTODIANWISE_LAST_DATE_FOR_UNIVERSE_STOCK_BY_TERMINAL = insert into asset_custodianwise_last_date (id,isin,Currency_Config_Name,currency_id,max_eff_from_date,max_eff_from_date_for_id,max_eff_from_date_for_config_name,terminal_id,terminal_config_name,CREATED_BY,CREATED_DATE) values(cast(concat(?,?,nextval('seq_asset_custodianwise_last_date')) as NUMERIC),?,?,?,?,?,?,?,?,?,now())

UPDATE_ASSET_CUSTODIANWISE_LAST_DATE_FOR_UNIVERSE_STOCK_BY_TERMINAL = update asset_custodianwise_last_date set max_eff_from_date = ?, updated_by= ?, updated_date=now() where isin=? and currency_id = ? and max_eff_from_date_for_config_name = ?

UPDATE_UNIVERSE_STOCK_DETAIL_BY_TERMINAL = update universe_stock_details_by_terminal set eff_to_date=?,ticker=?,isin=?,analyst_cnt=?,currency_config_name=?,terminal_app_id=?,terminal_app_config_name=?,buy_analyst_cnt=?,hold_analyst_cnt=?,sell_analyst_cnt=?,volatility_1y_perc=?,price_amt=?,target_price_mean_amt=?,target_price_median_amt=?,price_syscurr_amt=?,target_price_syscurr_amt=?,market_cap_syscurr_amt=?,forward_dividend_yield_12m_perc=?,trailing_price_to_book_nbr=?,forward_price_to_earning_12m_nbr=?,forward_roe_12m_perc=?,forward_ev_to_ebitda_12m_nbr=?,price_change_1d_perc=?,price_change_1w_perc=?,price_change_1m_perc=?,price_change_3m_perc=?,price_change_6m_perc=?,price_change_1y_perc=?,price_change_2y_perc=?,price_change_3y_perc=?,price_change_5y_perc=?,relative_strength_index_14d_nbr=?,boll_bands_20d_nbr=?,upside_to_price_target=?,over_sold=?,buy_ratings=?,sell_ratings=?,updated_by=?,updated_date=now() where (isin=? AND currency_id=? AND eff_to_date IS NULL)

UPDATE_UNIVERSE_STOCK_DETAIL_BY_TERMINAL_FOR_OLD_RECORDS = update universe_stock_details_by_terminal set eff_to_date=?,updated_by=?,updated_date=now() where (isin=? AND currency_id=? AND eff_to_date IS NULL)
UPDATE_UNIVERSE_STOCKS = Update Universe_Stock_Master set name=?, region_id =?,region_config_name=?,country_id=?,country_config_name=?,gics_sector_id=?,gics_sector_config_name=?,super_select_model_attribute_id=?,super_select_model_attribute_config_name=?,signal_model_attribute_id=?,signal_model_attribute_config_name=?,klay_offering_model_attribute_id=?,klay_offering_model_attribute_config_name=?,ranking_based_change_broker_ratings=?,updated_by=?,updated_date=now() where isin=? and currency_config_name = ? and is_Active = 1
ADD_UNIVERSE_STOCKS = Insert into Universe_Stock_Master (id,isin,currency_id,currency_config_name,name,region_id,region_config_name,country_id,country_config_name,gics_sector_id,gics_sector_config_name,super_select_model_attribute_id,super_select_model_attribute_config_name,signal_model_attribute_id,signal_model_attribute_config_name,klay_offering_model_attribute_id,klay_offering_model_attribute_config_name,ranking_based_change_broker_ratings,is_active,created_by,created_date) Values(cast(concat(?,?,nextval('Seq_Universe_Stock_Master')) as NUMERIC),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now())

INSERT_INTO_ASSET_CUSTODIANWISE_LAST_DATE_FOR_UNIVERSE_STOCK_DETAILS_BY_BROKER = insert into asset_custodianwise_last_date (id,asset_id, isin,Currency_Config_Name,currency_id,max_eff_from_date,max_eff_from_date_for_id,max_eff_from_date_for_config_name,broker_id, broker_config_name,CREATED_BY,CREATED_DATE) values(cast(concat(?,?,nextval('seq_asset_custodianwise_last_date')) as NUMERIC),(Select ID from Universe_Stock_Master where isin = ? and currency_config_name = ?),?,?,?,?,?,?,?,?,?,now())

GET_UNIVERSAL_STOCK_MASTER_HISTORY=  select USDBB.*,USM.currency_config_name ,USM.isin from Universe_Stock_Master USM inner join Universe_Stock_Details_By_Broker USDBB on USM.id = USDBB.Universe_Stock_Id where(  

UPDATE_ASSET_CUSTODIANWISE_LAST_DATE_FOR_UNIVERSE_STOCK_DETAILS_BY_BROKER = update asset_custodianwise_last_date set max_eff_from_date = ?, updated_by= ?, updated_date=now() where isin=? and Currency_Config_Name = ? and max_eff_from_date_for_config_name = ? and broker_config_name = ?

UPDATE_UNIVERSE_STOCK_DETAILS_BY_BROKER = Update Universe_Stock_Details_By_Broker set rating_coverage_type_id =?,rating_coverage_type_config_name=?,broker_currency_app_id=?,broker_currency_app_config_name=?,target_price_amt=?,broker_Rating_Id=?,broker_Rating_Config_Name=?, rating_id=?,rating_config_name=?,  remarks=?,analysis_year=?,analysis_month=?,eff_from_date=?,updated_by=?,updated_date =now() where universe_stock_id = (Select ID from Universe_Stock_Master where isin = ? and currency_config_name = ?) and broker_app_config_name=? and eff_from_date=? AND eff_to_date IS NULL

UNIVERSE_STOCK_DETAILS_BY_BROKER = Insert into Universe_Stock_Details_By_Broker (id,universe_stock_id,rating_coverage_type_id,rating_coverage_type_config_name,broker_app_id,broker_app_config_name,broker_currency_app_id,broker_currency_app_config_name,target_price_amt,broker_Rating_Id,broker_Rating_Config_Name,rating_id, rating_config_name,remarks,analysis_year,analysis_month,eff_from_date,created_by,created_date,immidiate_previous_rating_date) values (cast(concat(?,?,nextval('Seq_Universe_Stock_Details_By_Broker')) as NUMERIC),(select id from universe_stock_master where isin=? and currency_config_name=?),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,now(),?)

UPDATE_UNIVERSE_STOCK_DETAILS_BY_BROKER_FOR_OLD_RECORDS = update Universe_Stock_Details_By_Broker set eff_to_date=?,updated_by=?,updated_date=now() where universe_stock_id = (Select ID from Universe_Stock_Master where isin = ? and currency_config_name = ?) and broker_app_config_name=? AND eff_to_date is NULL

GET_ASSET_CUSTODIANWISE_LAST_DATE_FOR_UNIVERSE_STOCK_DETAILS_BY_BROKER = SELECT universeStockDetailsByBrokerdetails.*, universeStockDetailsByBrokermaxdate.universeStockDetailsByBrokermaxdate, universeStockDetailsByBrokermaxdate.uniqueKey FROM ( SELECT USDBB.id, USM.isin, USM.currency_id, USM.currency_config_name, USDBB.broker_app_id, USDBB.broker_app_Config_Name, USDBB.eff_from_date, USDBB.eff_to_date FROM Universe_Stock_Details_By_Broker USDBB inner join Universe_Stock_Master USM on USDBB.universe_stock_id = USM.id WHERE ( <universeStockDetailsByBrokerWhereClause> ) )  as universeStockDetailsByBrokerdetails JOIN ( SELECT concat(isin,'~', currency_id,'~', broker_id)   AS uniqueKey, isin, currency_id, broker_id, max_eff_from_date universeStockDetailsByBrokermaxdate FROM asset_custodianwise_last_date WHERE ( <assetCustodianWiseLastDateWhereClause> ) ) universeStockDetailsByBrokermaxdate ON ( universeStockDetailsByBrokermaxdate.isin = universeStockDetailsByBrokerdetails.isin AND universeStockDetailsByBrokermaxdate.currency_id = universeStockDetailsByBrokerdetails.currency_id AND universeStockDetailsByBrokermaxdate.broker_id = universeStockDetailsByBrokerdetails.Broker_App_id AND universeStockDetailsByBrokermaxdate.universeStockDetailsByBrokermaxdate = universeStockDetailsByBrokerdetails.eff_from_date)

UNIVERSE_STOCK_BROKER_INITIAL_RATED = Select usbir.id,Isin,currency_id,Broker_App_Id,rating_count,last_rating_date  from Universe_Stock_Master USM inner join Universe_Stock_Broker_Initial_Rated USBIR on USM.id = USBIR.Universe_Stock_Id where <whereclause>

INSERT_UNIVERSE_STOCK_BROKER_INITIAL_RATED = Insert into Universe_Stock_Broker_Initial_Rated (id,universe_stock_id,broker_app_id,broker_app_config_name,initial_rating_converage_date,is_active,created_by,created_date,rating_count,last_rating_date) values (cast(concat(?,?,nextval('Seq_Universe_Stock_Broker_Initial_Rated')) as NUMERIC),(select id from universe_stock_master where isin=? and currency_config_name=?),?,?,?,?,?,now(),1,?)

INSERT_ASSET_DOC_MAP=insert into asset_documents_map(id,isin,currency_id,currency_config_name,level_id,level_config_name,level_reference_id,document_internal_reference_nbr,document_external_reference_nbr,is_active,created_by,created_date,document_type_id,document_type_config_name) values((nextval('seq_asset_documents_map')),?,?,?,?,?,(Select ID from Universe_Stock_Master where isin = ? and currency_config_name = ?),?,?,?,?,?,?,?)

ASSET_DOCUMENTS_BUSINESS_DEFINATIONS=insert into asset_documents_business_definitions(id,asset_documents_map_id,document_business_definition_id,document_business_definition_config_name,created_by,created_date,updated_by) values((nextval('seq_Asset_Documents_Business_Definitions')),?,?,?,?,now(),?)

DOCUMENTS_MAP_UPDATE = update  asset_documents_map set Document_External_Reference_Nbr = ?, updated_by = ?, updated_date = now() where document_internal_reference_nbr = ?  

GET_INT_EXT_REFNBR_DOCUMENTS_MAP_UPDATE = select document_internal_reference_nbr,document_external_reference_nbr from asset_documents_map where isin=? and currency_config_name=? and document_type_config_name=?

DELETE_ASSET_DOCUMENTS_BUSINESS_DEFINATION = delete from asset_documents_business_definitions where asset_documents_map_id=?;
#SEARCH_UNIVERSE_STOCK = WITH brokerDetails AS (select USDBB.*, CASE WHEN USDBB.eff_from_date > USBIR.initial_rating_converage_date THEN 'RATED' ELSE 'NOT RATED' END as asRatedOrNot  from universe_stock_details_by_broker USDBB        left outer        join  Universe_Stock_Broker_Initial_Rated USBIR on                ( USDBB.universe_stock_id = USBIR.universe_stock_id                and USDBB.broker_app_id = USBIR.broker_app_id )              <dateFilterCondition>                               ) select * from (Select usm.id as ism_ID,usm.isin, usm.name, usm.currency_config_name as currency, usm.region_config_name, usm.country_config_name, usm.gics_sector_config_name, usm.super_select_model_attribute_config_name, usm.signal_model_attribute_config_name, usm.klay_offering_model_attribute_config_name,  factset.market_cap_syscurr_amt, factset.price_amt, factSet.volatility_1y_perc, factSet.target_price_syscurr_amt, factSet.trailing_price_to_book_nbr, factSet.forward_price_to_earning_12m_nbr, factSet.forward_roe_12m_perc, factSet.forward_ev_to_ebitda_12m_nbr, factSet.price_change_1d_perc, factSet.price_change_1w_perc, factSet.price_change_1m_perc, factSet.price_change_3m_perc, factSet.price_change_6m_perc, factSet.price_change_1y_perc, factSet.price_change_2y_perc, factSet.price_change_3y_perc, factSet.price_change_5y_perc, factSet.relative_strength_index_14d_nbr, factSet.boll_bands_20d_nbr, factSet.upside_to_price_target, factSet.over_sold, factSet.buy_ratings, factSet.sell_ratings, factSet.analyst_cnt, factSet.forward_dividend_yield_12m_perc, bkrDtl.id as bkrDtl_Id, bkrDtl.broker_app_id, bkrDtl.broker_app_config_name, bkrDtl.broker_rating_id, bkrDtl.broker_rating_config_name, bkrDtl.target_price_amt, bkrDtl.rating_id, bkrDtl.rating_config_name,  bkrdtl.asratedornot, bkrdtl.eff_from_date, ADM.id as ADM_Id, ADM.level_id, ADM.level_config_name,ADM.level_reference_id,ADM.document_internal_reference_nbr, ADM.document_external_reference_nbr, ADM.is_active from brokerDetails bkrDtl       inner join Universe_Stock_Master usm     on (usm.id=bkrDtl.Universe_Stock_Id)     LEFT OUTER JOIN (         SELECT 'factSet' as sectionId, terminalData.*         FROM Universe_Stock_Details_By_Terminal terminalData         WHERE  universe_stock_master_id IN (SELECT universe_Stock_id FROM brokerDetails)         ) factSet         ON (factSet.universe_stock_master_id =  usm.id         AND (bkrDtl.eff_from_date BETWEEN factSet.eff_from_date AND factSet.eff_to_date         OR (bkrDtl.eff_from_date  >= factSet.eff_from_date  AND factSet.eff_to_date IS NULL)))     left outer join Asset_Documents_Map ADM on (ADM.isin = usm.isin and ADM.currency_config_name = usm.currency_config_name and ADM.is_active = 1)  ) AS usm  
GET_ASSET_INFO_FOR_UNDERLYING_ASSET = select * from asset_master where <<placeholder>> and is_active=1

CHECK_UNDERLYING_ASSET = select * from underlying_asset_map where <<placeholder>> and is_Active=1

#SEARCH_UNIVERSE_STOCK = WITH brokerDetails AS (select USDBB.*, CASE WHEN USDBB.eff_from_date > USBIR.initial_rating_converage_date THEN 'RATED' ELSE 'NOT RATED' END as asRatedOrNot  from universe_stock_details_by_broker USDBB        left outer        join  Universe_Stock_Broker_Initial_Rated USBIR on                ( USDBB.universe_stock_id = USBIR.universe_stock_id                and USDBB.broker_app_id = USBIR.broker_app_id )              <dateFilterCondition>                               ) select * from (Select usm.id as ism_ID,usm.isin, usm.name, usm.currency_config_name as currency, usm.region_config_name, usm.country_config_name, usm.gics_sector_config_name, usm.super_select_model_attribute_config_name, usm.signal_model_attribute_config_name, usm.klay_offering_model_attribute_config_name,  factset.market_cap_syscurr_amt, factset.price_amt, factSet.volatility_1y_perc, factSet.target_price_syscurr_amt, factSet.trailing_price_to_book_nbr, factSet.forward_price_to_earning_12m_nbr, factSet.forward_roe_12m_perc, factSet.forward_ev_to_ebitda_12m_nbr, factSet.price_change_1d_perc, factSet.price_change_1w_perc, factSet.price_change_1m_perc, factSet.price_change_3m_perc, factSet.price_change_6m_perc, factSet.price_change_1y_perc, factSet.price_change_2y_perc, factSet.price_change_3y_perc, factSet.price_change_5y_perc, factSet.relative_strength_index_14d_nbr, factSet.boll_bands_20d_nbr, factSet.upside_to_price_target, factSet.over_sold, factSet.buy_ratings, factSet.sell_ratings, factSet.analyst_cnt, factSet.forward_dividend_yield_12m_perc, bkrDtl.id as bkrDtl_Id, bkrDtl.broker_app_id, bkrDtl.broker_app_config_name, bkrDtl.broker_rating_id, bkrDtl.broker_rating_config_name, bkrDtl.target_price_amt, bkrDtl.rating_id, bkrDtl.rating_config_name,  bkrdtl.asratedornot, bkrdtl.eff_from_date, ADM.id as ADM_Id, ADM.level_id, ADM.level_config_name,ADM.level_reference_id,ADM.document_internal_reference_nbr, ADM.document_external_reference_nbr, ADM.is_active from brokerDetails bkrDtl       inner join Universe_Stock_Master usm     on (usm.id=bkrDtl.Universe_Stock_Id)     LEFT OUTER JOIN (         SELECT 'factSet' as sectionId, terminalData.*         FROM Universe_Stock_Details_By_Terminal terminalData         WHERE  universe_stock_master_id IN (SELECT universe_Stock_id FROM brokerDetails)         ) factSet         ON (factSet.universe_stock_master_id =  usm.id         AND (bkrDtl.eff_from_date BETWEEN factSet.eff_from_date AND factSet.eff_to_date         OR (bkrDtl.eff_from_date  >= factSet.eff_from_date  AND factSet.eff_to_date IS NULL)))     left outer join Asset_Documents_Map ADM on (ADM.isin = usm.isin and ADM.currency_config_name = usm.currency_config_name and ADM.is_active = 1)  ) AS usm  
SEARCH_UNIVERSE_STOCK =  WITH brokerdetails AS (     SELECT         usdbb.*,         CASE             WHEN usdbb.eff_from_date > usbir.initial_rating_converage_date THEN                 'RATED'             ELSE                 'NOT_RATED'         END AS asratedornot , usdbb.immidiate_previous_rating_date as last_rating_date , usdbblast_rated.rating_config_name as last_rating_config_name    FROM         universe_stock_details_by_broker     usdbb         LEFT OUTER JOIN universe_stock_broker_initial_rated  usbir ON ( usdbb.universe_stock_id = usbir.universe_stock_id                                                                        AND usdbb.broker_app_id = usbir.broker_app_id ) LEFT OUTER JOIN universe_stock_details_by_broker usdbblast_rated on (usdbb.broker_app_id=usdbblast_rated.broker_app_id AND usdbb.universe_stock_id=usdbblast_rated.universe_stock_id AND usdbblast_rated.eff_from_Date=usdbb.immidiate_previous_rating_date) <dateFilterCondition>                                ) select * from (     SELECT     'usm' as sectionId,         usm.id       AS ism_id,         usm.isin,         usm.name,         usm.currency_config_name as currency,         usm.region_config_name,         usm.country_config_name,         usm.gics_sector_config_name,         usm.super_select_model_attribute_config_name,         usm.signal_model_attribute_config_name,         usm.klay_offering_model_attribute_config_name,         market_cap_syscurr_amt,         price_amt,         volatility_1y_perc,         target_price_syscurr_amt,         trailing_price_to_book_nbr,         forward_price_to_earning_12m_nbr,         forward_roe_12m_perc,         forward_ev_to_ebitda_12m_nbr,         price_change_1d_perc,         price_change_1w_perc,         price_change_1m_perc,         price_change_3m_perc,         price_change_6m_perc,         price_change_1y_perc,         price_change_2y_perc,         price_change_3y_perc,         price_change_5y_perc,         relative_strength_index_14d_nbr,         boll_bands_20d_nbr,         upside_to_price_target,         over_sold,         buy_ratings,         sell_ratings,         analyst_cnt,         forward_dividend_yield_12m_perc,         bkrdtl.id                   AS bkrdtl_id,         bkrdtl.broker_app_id,         bkrdtl.broker_app_config_name,         bkrdtl.broker_rating_id,         bkrdtl.broker_rating_config_name,         bkrdtl.target_price_amt,         bkrdtl.rating_id,         bkrdtl.rating_config_name,         bkrdtl.asratedornot,         bkrdtl.eff_from_date,bkrdtl.last_rating_config_name,bkrdtl.last_rating_date,         null as ADM_Id,         null as level_id,         null as level_config_name,         null as level_reference_id,         null as document_internal_reference_nbr,         null as document_external_reference_nbr,         null as document_type_id,         null as document_type_config_name,         null as is_active,         null as adbd_id,         null as asset_documents_map_id,         null as document_business_definition_id,         null as document_business_definition_config_name             FROM              brokerdetails bkrdtl         INNER JOIN universe_stock_master  usm ON ( usm.id = bkrdtl.universe_stock_id )         LEFT OUTER JOIN (             SELECT                 'factSet' AS sectionid,                 terminaldata.*             FROM                 universe_stock_details_by_terminal terminaldata             WHERE                 universe_stock_master_id IN (                     SELECT                         universe_stock_id                     FROM                         brokerdetails                 )         )                      factset ON ( universe_stock_master_id = usm.id                        AND ( bkrdtl.eff_from_date BETWEEN factset.eff_from_date AND factset.eff_to_date                              OR ( bkrdtl.eff_from_date >= factset.eff_from_date                                   AND factset.eff_to_date IS NULL ) ) )  union  Select 'Documents' as sectionId,         usm.id as ism_id,         usm.isin as isin,         null as name,         null as currency,         null as region_config_name,         usm.currency_config_name as country_config_name,         null as gics_sector_config_name,         null as super_select_model_attribute_config_name,         null as signal_model_attribute_config_name,         null as klay_offering_model_attribute_config_name,         null as market_cap_syscurr_amt,         null as price_amt,         null as volatility_1y_perc,         null as target_price_syscurr_amt,         null as trailing_price_to_book_nbr,         null as forward_price_to_earning_12m_nbr,         null as forward_roe_12m_perc,         null as forward_ev_to_ebitda_12m_nbr,         null as price_change_1d_perc,         null as price_change_1w_perc,         null as price_change_1m_perc,         null as price_change_3m_perc,         null as price_change_6m_perc,         null as price_change_1y_perc,         null as price_change_2y_perc,         null as price_change_3y_perc,         null as price_change_5y_perc,         null as relative_strength_index_14d_nbr,         null as boll_bands_20d_nbr,         null as upside_to_price_target,         null as over_sold,         null as buy_ratings,         null as sell_ratings,         null as analyst_cnt,         null as forward_dividend_yield_12m_perc,         null as bkrdtl_id,         null as broker_app_id,         null as broker_app_config_name,         null as broker_rating_id,         null as broker_rating_config_name,         null as target_price_amt,         null as rating_id,         null as rating_config_name,         null as asratedornot,         null as eff_from_date, NULL AS rating_config_name, NULL AS last_rating_date,         ADM.id as ADM_Id,         ADM.level_id,         ADM.level_config_name,         ADM.level_reference_id,         ADM.document_internal_reference_nbr,         ADM.document_external_reference_nbr,         ADM.document_type_id,         ADM.document_type_config_name,         ADM.is_active,         adbd.id as adbd_id,         adbd.asset_documents_map_id,         adbd.document_business_definition_id,         adbd.document_business_definition_config_name         from asset_documents_map ADM         join universe_stock_master usm         on (usm.id=ADM.level_reference_id AND ADM.level_config_name='ACM1937')         join asset_documents_business_definitions adbd on ADM.id=adbd.Asset_Documents_Map_Id         where (ADM.isin, ADM.currency_config_name)         in (select isin, currency_config_name from universe_stock_master where id in (         select universe_stock_id from brokerdetails         )) ) AS usm  

GET_MISSING_UNIVERSE_STOCK = Select isin,currency_id, currency_config_name from Universe_Stock_Master except Select isin, currency_id,currency_config_name from universe_stock_master where  
FAILEDASSET = select * from failedassets where reference_date=?
NOTCLASSIFIEDASSETS = select * from asset_Master where (category_config_name = 'ACM1767' OR subcategory_1_config_name = 'ACM1712' OR subcategory_2_config_name = 'ACM1713' OR subcategory_3_config_name = 'ACM1714')
UPDATE_UNIVERSE_STOCK_BROKER_INITIAL_RATED=update universe_stock_broker_initial_rated set last_rating_date=? where id=?

ADD_PREFERRED_ASSETS_GROUP = Insert into preferred_assets_group (ID, PA_GROUP_CODE, PA_GROUP_TYPE_ID,PA_GROUP_TYPE_CONFIG_NAME,IS_ACTIVE,EFF_FROM_DATE,CREATED_BY,CREATED_DATE) VALUES

ADD_PREFERRED_ASSETS = Insert into preferred_assets (ID, preferred_assets_group_id,isin,currency_id,currency_config_name,min_perc,min_flat_amt,allocation_order,instrument_type_id,instrument_type_config_name,preferred_assets_type_id,preferred_assets_type_config_name,asset_consolidation_code,security_rating,priority,is_active,created_by,created_date) VALUES (cast(concat(?,?,nextval('seq_preferred_assets'))as NUMERIC),?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,NOW())

GET_ASSET_CUSTODIANWISE_MAX_DATE = Select pag.id,pag.pa_group_code as group_code,pag.pa_group_type_id,pag.pa_group_type_config_name,pag.eff_from_date as group_eff_from_Date,pag.eff_to_date as group_eff_to_Date,acld.id as max_date_id,acld.preferred_Asset_group_type_id,acld.preferred_asset_group_type_config_name,acld.max_eff_from_date from Preferred_Assets_Group pag inner join asset_custodianwise_last_date acld ON pag.pa_group_type_id=acld.preferred_asset_group_type_id where

UPDATE_CUSTODIANWISE_MAX_DATE  = Update asset_custodianwise_last_date set max_eff_from_Date=?,updated_by=?,updated_date=now() where preferred_Asset_group_type_id=?

DEACTIVATE_PREFERRED_ASSETS = Update preferred_assets set is_active=0 where preferred_assets_group_id=?

DEACTIVATE_PREFERRED_ASSETS_GROUP = Update preferred_assets_group set eff_to_date=? where id=?

INSERT_MAX_DATE = Insert into asset_custodianwise_last_date(id,preferred_asset_group_type_id,preferred_Asset_group_type_config_name,max_eff_from_date_for_id,max_eff_from_Date_for_config_name,max_eff_from_date,created_by,created_date) values(cast(concat(?,?,nextval('seq_asset_custodianwise_last_date'))as NUMERIC),?,?,?,?,?,?,now())

PREFERRED_ASSET_BY_INFO_1 =  select Preferred_Assets_Group.id as id_Preferred_Assets_Group,Preferred_Assets_Group.is_active as active1,pa_group_code,pa_group_type_id,pa_group_type_config_name,Preferred_Assets_Group.created_by, Preferred_Assets_Group.created_date,Preferred_Assets_Group.updated_by,Preferred_Assets_Group.updated_date,Preferred_Assets_Group.eff_from_date,Preferred_Assets_Group.eff_to_date ,Preferred_Assets.*,asset_consolidation_master.*, asset_consolidation_master.id as asset_consolidation_master_id_1 ,asset_consolidation_details.* , asset_consolidation_details.id as id_asset_consolidation from Preferred_Assets_Group  join Preferred_Assets on ( Preferred_Assets_Group.Id=Preferred_Assets.Preferred_Assets_Group_Id and ( 

PREFERRED_ASSET_BY_INFO_CONDITION_1 = (Preferred_Assets_Group.PA_Group_Type_Config_Name=? 

PREFERRED_ASSET_BY_INFO_CONDITION_2 = and Preferred_Assets_Group.PA_Group_Type_Id=?) 

PREFERRED_ASSET_BY_INFO_2 =  ) )

STATEMENT_MERGER =  or 

PREFERRED_ASSET_BY_CODE =  select Preferred_Assets_Group.id as id_Preferred_Assets_Group,Preferred_Assets_Group.is_active as active1,pa_group_code,pa_group_type_id,pa_group_type_config_name,Preferred_Assets_Group.created_by, Preferred_Assets_Group.created_date,Preferred_Assets_Group.updated_by,Preferred_Assets_Group.updated_date,Preferred_Assets_Group.eff_from_date,Preferred_Assets_Group.eff_to_date ,Preferred_Assets.*,asset_consolidation_master.*, asset_consolidation_master.id as asset_consolidation_master_id_1 ,asset_consolidation_details.* , asset_consolidation_details.id as id_asset_consolidation from Preferred_Assets_Group  join Preferred_Assets on ( Preferred_Assets_Group.Id=Preferred_Assets.Preferred_Assets_Group_Id and ( 

PREFERRED_ASSET_BY_CODE_CONDITION_1 =  (Preferred_Assets_Group.PA_Group_Code=?) 

PREFERRED_ASSET_BY_CODE_END =  ) ) 

PREFERRED_ASSET_QUERY_LEFT_OUTER =     left outer  join asset_consolidation_master  on asset_consolidation_master.consolidation_code=preferred_assets.asset_consolidation_code left outer join asset_consolidation_details  on asset_consolidation_details.asset_consolidation_master_id= asset_consolidation_master.id 

PREFERRED_ASSET_QUERY_WHERE_CLAUSE =   where (EFF_FROM_DATE <= TO_DATE(?, 'yyyy-mm-DD') AND eff_to_date >= TO_DATE(?, 'yyyy-mm-DD') ) OR ((EFF_TO_DATE is null OR EFF_TO_DATE >= TO_DATE(?, 'yyyy-mm-DD')))   